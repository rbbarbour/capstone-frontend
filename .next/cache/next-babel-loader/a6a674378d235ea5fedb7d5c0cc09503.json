{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Rick\\\\MIT Work\\\\Capstone\\\\components\\\\restaurantList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      restaurants {\\n        id\\n        name\\n        description\\n        image {\\n          url\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from '@apollo/client';\nimport { useContext } from 'react';\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\nimport Link from \"next/link\";\n\nfunction RestaurantList(props) {\n  _s();\n\n  var _this = this;\n\n  var _useContext = useContext(AppContext),\n      setRestaurant = _useContext.setRestaurant; // const [state, setState] = useState(cart)\n\n\n  var GET_RESTAURANTS = gql(_templateObject());\n\n  var _useQuery = useQuery(GET_RESTAURANTS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log(\"Query Data: \".concat(data.restaurants));\n  var searchQuery = data.restaurants.filter(function (res) {\n    return res.name.toLowerCase().includes(props.search);\n  }); // let restId = searchQuery[0].id\n\n  if (searchQuery.length > 0) {\n    var restList = searchQuery.map(function (res) {\n      return __jsx(Col, {\n        xs: \"6\",\n        sm: \"4\",\n        key: res.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 5\n        }\n      }, __jsx(Card, {\n        style: {\n          margin: \"0 0.5rem 20px 0.5rem\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }\n      }, __jsx(CardTitle, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }\n      }, __jsx(\"h4\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 20\n        }\n      }, res.name)), __jsx(CardImg, {\n        top: true,\n        style: {\n          height: 200\n        },\n        src: \"http://localhost:1337\".concat(res.image.url),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }\n      }), __jsx(CardBody, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }\n      }, __jsx(CardText, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }, res.description)), __jsx(\"div\", {\n        className: \"card-footer\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }\n      }, __jsx(Link, {\n        href: \"/restaurant\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }\n      }, __jsx(Button, {\n        color: \"info\",\n        onClick: function onClick() {\n          return setRestaurant(res);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      }, \"Order from here\")))));\n    });\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }\n    }, restList));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 10\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\n_s(RestaurantList, \"8RJMfH/Ncta8fw3PCxCyuWjjo8k=\", false, function () {\n  return [useQuery];\n});\n\n_c = RestaurantList;\nexport default RestaurantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RestaurantList\");","map":{"version":3,"sources":["C:/Users/Rick/MIT Work/Capstone/components/restaurantList.js"],"names":["gql","useQuery","useContext","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","Link","RestaurantList","props","setRestaurant","GET_RESTAURANTS","loading","error","data","console","log","restaurants","searchQuery","filter","res","name","toLowerCase","includes","search","length","restList","map","id","margin","height","image","url","description"],"mappings":"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","sourcesContent":["import { gql, useQuery} from '@apollo/client';\nimport { useContext } from 'react';\nimport AppContext from \"./context\"\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col} from \"reactstrap\";\nimport Link from \"next/link\";\n\nfunction RestaurantList(props) {  \n  const {setRestaurant} = useContext(AppContext);\n  // const [state, setState] = useState(cart)\n\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS)\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  console.log(`Query Data: ${data.restaurants}`);\n\n\nlet searchQuery = data.restaurants.filter((res) =>{\n    return res.name.toLowerCase().includes(props.search)\n  })\n\n// let restId = searchQuery[0].id\n \nif(searchQuery.length > 0){\n  const restList = searchQuery.map((res) => (\n    <Col xs=\"6\" sm=\"4\" key={res.id}>\n      <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n        <CardTitle><h4>{res.name}</h4></CardTitle>\n        <CardImg\n          top={true}\n          style={{ height: 200 }}\n          src={`http://localhost:1337${res.image.url}`}\n        />\n        <CardBody>\n          <CardText>{res.description}</CardText>\n        </CardBody>\n        <div className=\"card-footer\">\n        <Link href=\"/restaurant\">\n          <Button color=\"info\" onClick={()=> setRestaurant(res)}>\n            Order from here\n          </Button>\n        </Link> \n        </div>\n      </Card>\n    </Col>\n  ))\n\n  return(\n    <Container>\n    <Row xs='3'>\n      {restList}\n    </Row>\n    </Container>\n \n  )\n} else {\n  return <h1> No Restaurants Found</h1>\n}\n}\n   export default RestaurantList"]},"metadata":{},"sourceType":"module"}