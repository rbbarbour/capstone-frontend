{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rick\\\\MIT Work\\\\Capstone\\\\components\\\\dishesList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useContext } from \"react\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction DishesList({\n  restId,\n  search\n}) {\n  const {\n    addItem,\n    cart\n  } = useContext(AppContext);\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANT_DISHES, {\n    variables: {\n      id: restId\n    }\n  });\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, \"ERROR here\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, \"Not found\"); //let restaurant = data.restaurant;\n\n  let searchQuery = data.restaurant.dishes.filter(res => {\n    return res.name.toLowerCase().includes(search);\n  }); //if (restId > 0) {\n\n  if (searchQuery.length > 0) {\n    const dishList = searchQuery.map(dish => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      style: {\n        padding: 0\n      },\n      key: dish.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, __jsx(CardTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, __jsx(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 22\n      }\n    }, dish.name)), __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: `http://localhost:1337${dish.image.url}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }), __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, dish.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, \"$\", dish.price, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }), __jsx(Button, {\n      color: \"info\",\n      onClick: () => addItem(dish, cart),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, \"+ Add To Cart\")))));\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, dishList));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 12\n      }\n    }, \" No Dishes Found\");\n  }\n}\n\nexport default DishesList;","map":{"version":3,"sources":["C:/Users/Rick/MIT Work/Capstone/components/dishesList.js"],"names":["gql","useQuery","useContext","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","DishesList","restId","search","addItem","cart","GET_RESTAURANT_DISHES","loading","error","data","variables","id","searchQuery","restaurant","dishes","filter","res","name","toLowerCase","includes","length","dishList","map","dish","padding","margin","height","image","url","description","price"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,SACEC,MADF,EAEEC,IAFF,EAGEC,QAHF,EAIEC,OAJF,EAKEC,QALF,EAMEC,SANF,EAOEC,SAPF,EAQEC,GARF,EASEC,GATF,QASY,YATZ;;AAYA,SAASC,UAAT,CAAoB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAApB,EAAwC;AACtC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBf,UAAU,CAACC,UAAD,CAApC;AAEA,QAAMe,qBAAqB,GAAGlB,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAhBE;AAkBA,QAAM;AAAEmB,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BpB,QAAQ,CAACiB,qBAAD,EAAwB;AAC/DI,IAAAA,SAAS,EAAE;AAAEC,MAAAA,EAAE,EAAET;AAAN;AADoD,GAAxB,CAAzC;AAIA,MAAIK,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACX,MAAI,CAACC,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP,CA3B2B,CA6BtC;;AACA,MAAIG,WAAW,GAAGH,IAAI,CAACI,UAAL,CAAgBC,MAAhB,CAAuBC,MAAvB,CAA+BC,GAAD,IAAQ;AACtD,WAAOA,GAAG,CAACC,IAAJ,CAASC,WAAT,GAAuBC,QAAvB,CAAgChB,MAAhC,CAAP;AACD,GAFiB,CAAlB,CA9BsC,CAkCtC;;AACA,MAAGS,WAAW,CAACQ,MAAZ,GAAqB,CAAxB,EAA0B;AACxB,UAAMC,QAAQ,GAAGT,WAAW,CAACU,GAAZ,CAAiBC,IAAD,IAC/B,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAY,MAAA,EAAE,EAAC,GAAf;AAAmB,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAA1B;AAA0C,MAAA,GAAG,EAAED,IAAI,CAACZ,EAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEc,QAAAA,MAAM,EAAE;AAAV,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,IAAI,CAACN,IAAV,CAAX,CADF,EAEE,MAAC,OAAD;AACE,MAAA,GAAG,EAAE,IADP;AAEE,MAAA,KAAK,EAAE;AAAES,QAAAA,MAAM,EAAE;AAAV,OAFT;AAGE,MAAA,GAAG,EAAG,wBAAuBH,IAAI,CAACI,KAAL,CAAWC,GAAI,EAH9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAOE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAWL,IAAI,CAACM,WAAhB,CADF,CAPF,EAUE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACIN,IAAI,CAACO,KADT,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAqB,MAAA,OAAO,EAAE,MAAM1B,OAAO,CAACmB,IAAD,EAAOlB,IAAP,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAHF,CAVF,CADF,CADe,CAAjB;AAuBA,WACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGgB,QADH,CADA,CADF;AAOD,GA/BD,MA+BO;AACL,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AACD;AACF;;AACD,eAAepB,UAAf","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport { useContext } from \"react\";\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col} from \"reactstrap\";\n\n\nfunction DishesList({ restId, search }) {\n  const { addItem, cart } = useContext(AppContext);\n\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n    variables: { id: restId },\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR here</p>;\n  if (!data) return <p>Not found</p>;\n\n  //let restaurant = data.restaurant;\n  let searchQuery = data.restaurant.dishes.filter((res) =>{\n    return res.name.toLowerCase().includes(search)\n  })\n\n  //if (restId > 0) {\n  if(searchQuery.length > 0){\n    const dishList = searchQuery.map((dish) => (\n      <Col xs=\"6\" sm=\"4\" style={{ padding: 0 }} key={dish.id}>\n        <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n          <CardTitle><h5>{dish.name}</h5></CardTitle>\n          <CardImg\n            top={true}\n            style={{ height: 200 }}\n            src={`http://localhost:1337${dish.image.url}`}\n          />\n          <CardBody>\n            <CardText>{dish.description}</CardText>\n          </CardBody>\n          <div className=\"card-footer\">\n            ${dish.price}\n            <br />\n            <Button color=\"info\" onClick={() => addItem(dish, cart)}>\n              + Add To Cart\n            </Button>\n          </div>\n        </Card>\n      </Col>\n    ))\n      \n    return(\n      <Container>\n      <Row xs='3'>\n        {dishList}\n      </Row>\n      </Container>  \n    )\n  } else {\n    return <h1> No Dishes Found</h1>;\n  }\n}\nexport default DishesList;\n"]},"metadata":{},"sourceType":"module"}