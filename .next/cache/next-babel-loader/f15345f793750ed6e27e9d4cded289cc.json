{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Rick\\\\MIT Work\\\\Capstone\\\\components\\\\dishesList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query ($id: ID!) {\\n      restaurant(id: $id) {\\n        id\\n        name\\n        dishes {\\n          id\\n          name\\n          description\\n          price\\n          image {\\n            url\\n          }\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useContext } from \"react\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction DishesList(_ref) {\n  _s();\n\n  var _this = this;\n\n  var restId = _ref.restId,\n      search = _ref.search;\n\n  var _useContext = useContext(AppContext),\n      addItem = _useContext.addItem;\n\n  var GET_RESTAURANT_DISHES = gql(_templateObject());\n\n  var _useQuery = useQuery(GET_RESTAURANT_DISHES, {\n    variables: {\n      id: restId\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, \"ERROR here\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  var searchQuery = data.restaurant.dishes.filter(function (res) {\n    return res.name.toLowerCase().includes(search);\n  });\n\n  if (searchQuery.length > 0) {\n    var dishList = searchQuery.map(function (dish) {\n      return __jsx(Col, {\n        xs: \"6\",\n        sm: \"4\",\n        style: {\n          padding: 0\n        },\n        key: dish.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 7\n        }\n      }, __jsx(Card, {\n        style: {\n          margin: \"0 0.5rem 20px 0.5rem\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }\n      }, __jsx(CardTitle, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }, __jsx(\"h5\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 22\n        }\n      }, dish.name)), __jsx(CardImg, {\n        top: true,\n        style: {\n          height: 100\n        },\n        src: \"http://localhost:1337\".concat(dish.image.url),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }), __jsx(CardBody, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }\n      }, __jsx(CardText, {\n        style: {\n          height: 150\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }\n      }, dish.description)), __jsx(\"div\", {\n        className: \"card-footer\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }\n      }, \"$\", dish.price.toFixed(2), __jsx(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }\n      }), __jsx(Button, {\n        color: \"info\",\n        onClick: function onClick() {\n          return addItem(dish);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }\n      }, \"+ Add To Cart\"))));\n    });\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, dishList));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 12\n      }\n    }, \" No Dishes Found\");\n  }\n}\n\n_s(DishesList, \"2IiZu96LzC4KzwsvR/Bt1ejWkMs=\", false, function () {\n  return [useQuery];\n});\n\n_c = DishesList;\nexport default DishesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DishesList\");","map":{"version":3,"sources":["C:/Users/Rick/MIT Work/Capstone/components/dishesList.js"],"names":["gql","useQuery","useContext","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","DishesList","restId","search","addItem","GET_RESTAURANT_DISHES","variables","id","loading","error","data","searchQuery","restaurant","dishes","filter","res","name","toLowerCase","includes","length","dishList","map","dish","padding","margin","height","image","url","description","price","toFixed"],"mappings":"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","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport { useContext } from \"react\";\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col} from \"reactstrap\";\n\n\nfunction DishesList({ restId, search }) {\n  const { addItem } = useContext(AppContext);\n\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n    variables: { id: restId },\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR here</p>;\n  if (!data) return <p>Not found</p>;\n\n  \n  let searchQuery = data.restaurant.dishes.filter((res) =>{\n    return res.name.toLowerCase().includes(search)\n  })\n\n  \n  if(searchQuery.length > 0){\n    const dishList = searchQuery.map((dish) => (\n      <Col xs=\"6\" sm=\"4\" style={{ padding: 0 }} key={dish.id}>\n        <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n          <CardTitle><h5>{dish.name}</h5></CardTitle>\n          <CardImg\n            top={true}\n            style={{ height: 100 }}\n            src={`http://localhost:1337${dish.image.url}`}\n          />\n          <CardBody>\n            <CardText style={{ height: 150 }}>{dish.description}</CardText>\n          </CardBody>\n          <div className=\"card-footer\">\n            ${dish.price.toFixed(2)}\n            <br />\n            <Button color=\"info\" onClick={() => addItem(dish)}>\n              + Add To Cart\n            </Button>\n          </div>\n        </Card>\n      </Col>\n    ))\n      \n    return(\n      <Container>\n      <Row xs='3'>\n        {dishList}\n      </Row>\n      </Container>  \n    )\n  } else {\n    return <h1> No Dishes Found</h1>;\n  }\n}\nexport default DishesList;\n"]},"metadata":{},"sourceType":"module"}